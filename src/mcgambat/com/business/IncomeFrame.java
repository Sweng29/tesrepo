/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mcgambat.com.business;

import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Date;
import mcgambat.com.daoImpl.IncomeDAOImpl;
import mcgambat.com.daoImpl.ReciptTypeDAOImpl;
import mcgambat.com.models.IncomeModel;
import mcgambat.com.models.ReciptTypeModel;
import mcgambat.com.utility.CommonMethods;

/**
 *
 * @author Lenovo
 */
public class IncomeFrame extends javax.swing.JFrame {

    /**
     * Creates new form IncomeFrame
     */
    Integer dotcount = 0;
    Integer incomeId;
    public IncomeFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        fillIncomeTable();
        disableButtons(1);
        fillReciptTypeComboBox();
        depositerNameField.requestFocus();
        this.setExtendedState(IncomeFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        incomeSearchField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        incomeTable = new javax.swing.JTable();
        addIncome = new javax.swing.JLabel();
        updateIncome = new javax.swing.JLabel();
        resetButton = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        incomeDateField = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        receiptKindField = new javax.swing.JComboBox<>();
        depositerNameField = new javax.swing.JTextField();
        amountField = new javax.swing.JTextField();
        totalField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem1.setText("Delete Record");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Search Income");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 56, -1, 40));

        incomeSearchField.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        incomeSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomeSearchFieldActionPerformed(evt);
            }
        });
        incomeSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                incomeSearchFieldKeyReleased(evt);
            }
        });
        jPanel2.add(incomeSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 60, 270, 30));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Income Date");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 110, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Receipt Kind");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 110, 30));

        incomeTable.setFont(new java.awt.Font("Century Gothic", 0, 17)); // NOI18N
        incomeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        incomeTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        incomeTable.setRowHeight(20);
        incomeTable.setSelectionBackground(new java.awt.Color(11, 18, 29));
        incomeTable.setSelectionForeground(new java.awt.Color(140, 198, 62));
        incomeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                incomeTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                incomeTableMouseReleased(evt);
            }
        });
        incomeTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                incomeTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(incomeTable);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(493, 110, 850, 540));

        addIncome.setBackground(new java.awt.Color(53, 168, 83));
        addIncome.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        addIncome.setForeground(new java.awt.Color(255, 255, 255));
        addIncome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addIncome.setText("Add Income");
        addIncome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addIncome.setOpaque(true);
        addIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addIncomeMouseClicked(evt);
            }
        });
        jPanel2.add(addIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 520, 138, 34));

        updateIncome.setBackground(new java.awt.Color(53, 168, 83));
        updateIncome.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        updateIncome.setForeground(new java.awt.Color(255, 255, 255));
        updateIncome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateIncome.setText("Update Income");
        updateIncome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateIncome.setOpaque(true);
        updateIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateIncomeMouseClicked(evt);
            }
        });
        jPanel2.add(updateIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 520, 152, 34));

        resetButton.setBackground(new java.awt.Color(53, 168, 83));
        resetButton.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resetButton.setText("Reset");
        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.setOpaque(true);
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
        });
        jPanel2.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 570, 330, 30));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Depositer Name");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 120, 30));
        jPanel2.add(incomeDateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 230, 30));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Amount");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 120, 30));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Total");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 430, 100, 30));

        receiptKindField.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        receiptKindField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Receipt Type" }));
        jPanel2.add(receiptKindField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 280, 230, 30));

        depositerNameField.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jPanel2.add(depositerNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 230, 30));

        amountField.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        amountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountFieldKeyTyped(evt);
            }
        });
        jPanel2.add(amountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 230, 30));

        totalField.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        totalField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalFieldKeyTyped(evt);
            }
        });
        jPanel2.add(totalField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 430, 230, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 62, 1370, 690));

        jPanel1.setBackground(new java.awt.Color(53, 168, 83));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Income");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("X");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(580, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(526, 526, 526)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 60));

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Add");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Update");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Delete");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Reset");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Back");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void incomeSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incomeSearchFieldActionPerformed

    }//GEN-LAST:event_incomeSearchFieldActionPerformed

    private void incomeSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_incomeSearchFieldKeyReleased
        CommonMethods.searchFromTable(incomeTable,incomeSearchField);
    }//GEN-LAST:event_incomeSearchFieldKeyReleased

    private void incomeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_incomeTableMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_incomeTableMouseClicked

    private void incomeTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_incomeTableMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(incomeTable, evt.getX(), evt.getY());
        }        
    }//GEN-LAST:event_incomeTableMouseReleased

    private void addIncomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addIncomeMouseClicked
        addIncome();
    }//GEN-LAST:event_addIncomeMouseClicked

    private void updateIncomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateIncomeMouseClicked
        updateIncome();
    }//GEN-LAST:event_updateIncomeMouseClicked

    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        clearAllFields();
        disableButtons(1);
    }//GEN-LAST:event_resetButtonMouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked

    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void amountFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountFieldKeyReleased
        
    }//GEN-LAST:event_amountFieldKeyReleased

    private void amountFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountFieldKeyTyped
        char c=evt.getKeyChar();
        if((Character.isDigit(c))||(c==KeyEvent.VK_PERIOD)||(c==KeyEvent.VK_BACK_SPACE)){
            int punto=0;
            if(c==KeyEvent.VK_PERIOD){ 
                        String s=amountField.getText();
                        int dot=s.indexOf('.');
                        punto=dot;
                        if(dot!=-1){
                            getToolkit().beep();
                            evt.consume();
                        }
                    }
        }
        else{    
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_amountFieldKeyTyped

    private void totalFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalFieldKeyTyped
        char c=evt.getKeyChar();
        if((Character.isDigit(c))||(c==KeyEvent.VK_PERIOD)||(c==KeyEvent.VK_BACK_SPACE)){
            int punto=0;
            if(c==KeyEvent.VK_PERIOD){ 
                        String s=totalField.getText();
                        int dot=s.indexOf('.');
                        punto=dot;
                        if(dot!=-1){
                            getToolkit().beep();
                            evt.consume();
                        }
                    }
        }
        else{    
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_totalFieldKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        deleteIncome();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(addIncome.isEnabled()){
            addIncome();
        }else{
            new MessageForm("Error", "Add button is disabled try reset then add record.", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(updateIncome.isEnabled()){
            updateIncome();
        }else{
            new MessageForm("Error", "Please select any record to update.", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        deleteIncome();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void incomeTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_incomeTableKeyReleased
        if(evt.getKeyCode()==38 || evt.getKeyCode()==40)
        {
            getSelectedRow();
        }
        else if(evt.getKeyCode()==37)
        {
            depositerNameField.requestFocus();
        }
    }//GEN-LAST:event_incomeTableKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IncomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IncomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IncomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IncomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IncomeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addIncome;
    private javax.swing.JTextField amountField;
    private javax.swing.JTextField depositerNameField;
    private com.toedter.calendar.JDateChooser incomeDateField;
    private javax.swing.JTextField incomeSearchField;
    private javax.swing.JTable incomeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> receiptKindField;
    private javax.swing.JLabel resetButton;
    private javax.swing.JTextField totalField;
    private javax.swing.JLabel updateIncome;
    // End of variables declaration//GEN-END:variables

    private void fillIncomeTable() {
        CommonMethods.fillTables(new IncomeDAOImpl().viewAllIncomeDetails(), incomeTable, jScrollPane2, this);
    }

    private void disableButtons(Integer i) {
        if(i==1)
        {
            addIncome.setEnabled(true);
            updateIncome.setEnabled(false);
        }else if(i==0){
            addIncome.setEnabled(false);
            updateIncome.setEnabled(true);            
        }
    }

    private void clearAllFields() {
      disableButtons(1);
      incomeDateField.setDate(null);
      depositerNameField.setText("");
      receiptKindField.setSelectedIndex(0);
      amountField.setText("");
      totalField.setText("");
      incomeSearchField.setText("");
      incomeTable.clearSelection();
    }

    private void addIncome() {
        if (!depositerNameField.getText().trim().equals("") && incomeDateField.getDate()!=null && receiptKindField.getSelectedIndex()!=0 && !amountField.getText().trim().equals("") && !totalField.getText().trim().equals("")) {
           String depositerName = depositerNameField.getText();
           String receiptKind = receiptKindField.getSelectedItem().toString();
           Double amount = Double.valueOf(amountField.getText());
           Double total = Double.valueOf(totalField.getText());
           IncomeModel incomeModel = new IncomeModel();
           incomeModel.setAmount(amount);
           Timestamp incomeDate = new Timestamp(incomeDateField.getDate().getTime());
           Timestamp currentDate = new Timestamp(System.currentTimeMillis());
           incomeModel.setCreatedDate(currentDate);
           incomeModel.setDepositerName(depositerName);
           incomeModel.setIncomeDate(incomeDate);
           incomeModel.setModifiedDate(currentDate);
           ReciptTypeModel recipTypeModel = new ReciptTypeDAOImpl().getReciptTypeDetailsByName(receiptKind);
           incomeModel.setReciptTypeModel(recipTypeModel);
           incomeModel.setTotal(total);
           Integer result = new IncomeDAOImpl().addIncome(incomeModel);
           if(result<0)
           {
               new MessageForm("Error", "Record could not be added try again.","error.png").setVisible(true); 
           }else{
               new MessageForm("Success", "Record has been added successfully.","info.png").setVisible(true);
               fillIncomeTable();
               clearAllFields();
           }
        } else {
            new MessageForm("Error", "Please fill all fields.", "error.png").setVisible(true);
        }
          
    }

    private void updateIncome() {
        if (incomeTable.getSelectedRow() > -1) {
            Integer incomeId = (Integer) incomeTable.getValueAt(incomeTable.getSelectedRow(), 0);
            if (!depositerNameField.getText().trim().equals("") && incomeDateField.getDate()!=null && receiptKindField.getSelectedIndex()!=0 && !amountField.getText().trim().equals("") && !totalField.getText().trim().equals("")) {
                String depositerName = depositerNameField.getText();
                String receiptKind = receiptKindField.getSelectedItem().toString();
                Double amount = Double.valueOf(amountField.getText());
                Double total = Double.valueOf(totalField.getText());
                IncomeModel incomeModel = new IncomeModel();
                incomeModel.setAmount(amount);
                Timestamp incomeDate = new Timestamp(incomeDateField.getDate().getTime());
                Timestamp currentDate = new Timestamp(System.currentTimeMillis());
                incomeModel.setCreatedDate(currentDate);
                incomeModel.setDepositerName(depositerName);
                incomeModel.setIncomeDate(incomeDate);
                incomeModel.setModifiedDate(currentDate);
               ReciptTypeModel recipTypeModel = new ReciptTypeDAOImpl().getReciptTypeDetailsByName(receiptKind);
               incomeModel.setReciptTypeModel(recipTypeModel);
                incomeModel.setTotal(total);
                incomeModel.setIncomeId(incomeId);
                Integer result = new IncomeDAOImpl().updateIncome(incomeModel);
                if(result<0)
                {
                    new MessageForm("Error", "Record could not be updated try again.","error.png").setVisible(true); 
                }else{
                    new MessageForm("Success", "Record has been updated successfully.","info.png").setVisible(true);
                    fillIncomeTable();
                    clearAllFields();
                }
            } else {
                new MessageForm("Error", "Please fill fields to update Record.", "error.png").setVisible(true);
            }

        } else {
            new MessageForm("Error", "Please select any record to update.", "error.png").setVisible(true);
        }
    }

    private void fillReciptTypeComboBox() {
        ResultSet resultSet = new ReciptTypeDAOImpl().viewAllReciptTypes();
        try{
            while(resultSet.next())
            {
                receiptKindField.addItem(resultSet.getString("Recipt Type"));
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void deleteIncome() {
        if(incomeTable.getSelectedRow()<0)
        {
            new MessageForm("Error", "Please select a row to delete record.","error.png").setVisible(true); 
        }else{
           IncomeModel incomeModel = new IncomeModel();
           Timestamp currentDate = new Timestamp(System.currentTimeMillis());
           incomeModel.setModifiedDate(currentDate);
           incomeModel.setIncomeId(incomeId);
           Integer result = new IncomeDAOImpl().deleteIncomeById(incomeModel);
           if(result<0)
           {
               new MessageForm("Error", "Record could not be deleted try again.","error.png").setVisible(true); 
           }else{
               new MessageForm("Success", "Record has been deleted successfully.","info.png").setVisible(true);
               fillIncomeTable();
               clearAllFields();
           }
        }
    }

    private void getSelectedRow() {
        if (incomeTable.getSelectedRow() > -1) {
            Integer selectedRow = incomeTable.getSelectedRow();
            incomeId = (Integer) incomeTable.getValueAt(incomeTable.getSelectedRow(), 0);
            Date incomeDate = (Date) incomeTable.getValueAt(incomeTable.getSelectedRow(), 1);
            String depositerName = (String) incomeTable.getValueAt(incomeTable.getSelectedRow(), 2);
            String receiptKind = (String) incomeTable.getValueAt(incomeTable.getSelectedRow(), 3);
            BigDecimal amount = (BigDecimal) incomeTable.getValueAt(incomeTable.getSelectedRow(), 4);
            BigDecimal total = (BigDecimal) incomeTable.getValueAt(incomeTable.getSelectedRow(), 5);
            incomeDateField.setDate(incomeDate);
            depositerNameField.setText(depositerName);
            receiptKindField.setSelectedItem(receiptKind);
            amountField.setText(String.valueOf(amount));
            totalField.setText(String.valueOf(total));
            disableButtons(0);
        }
    }
}
